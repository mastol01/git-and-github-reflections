How did viewing a diff between two versions of a file help you see the bug that was introduced?
I am able to focus on the difference, removing the sections that are the same. Time saving. WIll not missa difference because of this.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Spot mistakes in code.
Revisit old ideas that went in a different direction later on.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Forgetfulness. Too many or too little differences.

Feature Comparison
Any editor can use this version control
Use in any environment
Manual Save

When to version control
Time interval - bad
Lines of code or text intervals - bad
Long pauses in editing - better
When you choose - better


Version Control Systems
Git
CVS - Concurrent Version Systems
SVN - Subversion
hg - Mercurial

Commits
Have an ID, Author, Date and Message
Message - describes differences between two versions
Examples of when to add a commit
	Fix off-by-one bug
	Add Cool New Feature
	Improve User Docs
Each commit should refer to a logical change. Don't want too many commits otherwise we are unable to read the code.

Repository
Area with multiple files.
All files in the repository will be logged when any one file is changed.
All files are committed together so that you can see all changes to the system at once.

Note: github mastol01 with basic


Download a thing:
git clone https://github.com/udacity/asteroids
git log          logs are in reverse chronological order
	q to quit log
git log --stat   gives more detail such as number of adds and deletes
git diff <path> <path>
to find differences in one commit, use git diff <previous commit> <commit you want to see>
git config --global color.ui auto   shows color, green for adds reds for deletes
git clone    copies the repository, i do not understand the purpose of this yet
git checkout <path>

Configuring Bash
 you will need the following saved in the home dir (where terminal opens up in):
		git-completion.bash
		git-prompt.sh
		.bashrc

Add the following to the bottom of .bashrc:
		# Enable tab completion
		source ~/git-completion.bash

		# colors!
		green="\[\033[0;32m\]"
		blue="\[\033[0;34m\]"
		purple="\[\033[0;35m\]"
		reset="\[\033[0m\]"

		# Change command prompt
		source ~/git-prompt.sh
		export GIT_PS1_SHOWDIRTYSTATE=1
		# '\u' adds the name of the current user to the prompt
		# '\$(__git_ps1)' adds git-related stuff
		# '\W' adds the name of the current directory
		export PS1="$purple\u$green\$(__git_ps1)$blue \W $ $reset"

Colours can be changed

Run the following commands in the terminal:
		git config --global push.default upstream
		git config --global merge.conflictstyle diff3

Run this, or similar, to make Sublime the default text editor:
		git config --global core.editor "'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w"




